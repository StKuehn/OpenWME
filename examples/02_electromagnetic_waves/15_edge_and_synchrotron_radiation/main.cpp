/*
Copyright (c) 2023 by Steffen KÃ¼hn, steffen.kuehn@aurinovo.de

This file is part of OpenWME, an electromagnetic field solver based on
Weber-Maxwell electrodynamics.

OpenWME is free software: you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later version.

OpenWME is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see <https://www.gnu.org/licenses/>.
*/

#include <stdio.h>
#include <math.h>
#include "constants.h"
#include "scene.h"
#include "display.h"

const TVector black = TVector(0.25, 0.25, 0.25);
const TVector red = TVector(1, 0, 0);
const TVector blue = TVector(0, 0, 1);
const sim_double dt = 0.1 * ns;

const sim_double maxtime = 55 * ns;
const sim_double charge = -1e14 * e;
const sim_double mass = 1 * g;

const sim_double vm = 0.90 * c;
const sim_double x0 = -4.5 * m;
const sim_double rad = 2 * m;

// trajectory
TVector trajectory0(sim_double t)
{
	if (t > -(x0 / vm))
	{
		if (t > -x0 / vm + pi * rad / vm)
		{
			return TVector(-(vm * (t - (pi * rad) / vm + x0 / vm)), 0, -rad);
		}
		else
		{
			return TVector(rad * sin((vm * (t + x0 / vm)) / rad), 0, rad * cos((vm * (t + x0 / vm)) / rad));
		}
	}
	else
	{
		return TVector(t * vm + x0, 0, rad);
	}
}

// first derivative of the trajectory with respect to time
TVector trajectory1(sim_double t)
{
	if (t > -(x0 / vm))
	{
		if (t > -x0 / vm + pi * rad / vm)
		{
			return TVector(-vm, 0, 0);
		}
		else
		{
			return TVector(vm * cos((vm * (t + x0 / vm)) / rad), 0, -(vm * sin((vm * (t + x0 / vm)) / rad)));
		}
	}
	else
	{
		return TVector(vm, 0, 0);
	}
}

// second derivative of the trajectory with respect to time
TVector trajectory2(sim_double t)
{
	if (t > -(x0 / vm))
	{
		if (t > -x0 / vm + pi * rad / vm)
		{
			return TVector(0, 0, 0);
		}
		else
		{
			return TVector(-((pow(vm, 2) * sin((t * vm + x0) / rad)) / rad), 0, -((pow(vm, 2) * cos((t * vm + x0) / rad)) / rad));
		}
	}
	else
	{
		return TVector(0, 0, 0);
	}
}

int main()
{
	TScene scene;
	std::deque<TParticle*> Field;

	// create the point charge (electron burst)
	TParticle* Electron = scene.Add_Particle();
	Electron->ToPointCharge(mass, charge);
	Electron->SetFixedTrajectory(TVector(0, 0, 0), trajectory0, trajectory1, trajectory2);

	// create a grid of test charges to represent the field generated by the point charge
	for (int ix = -50; ix <= 50; ix++)
	{
		for (int iz = -50; iz <= 50; iz++)
		{
			TParticle* Probe = scene.Add_Probe(TVector(ix * 10 * cm, 0, iz * 10 * cm), TVector(0, 0, 0));
			Field.push_back(Probe);
			scene.Add_WeberMaxwellForce(Electron, Probe);
		}
	}

	// open a window to display the field and motion of the particle
	TDisplay display(700, 700, -5 * m, -5 * m, 5 * m, 5 * m, "Edge and synchrotron radiation");

	// simulate the field step by step
	for (int i = 0; i * dt <= maxtime; i++)
	{
		// time step
		scene.TimeStep(dt);

		// display simulation
		display.Clear();
		display.PlotForceFieldXZ(Field, i * dt, 1e-5, 10, 10, black);
		display.DrawTime(i * dt / ns, "ns", 1, red);
		display.DrawParticle(Electron, i * dt, 5, red);
		display.Draw(true);
	}

	return 0;
}

/*
Copyright (c) 2023 by Steffen KÃ¼hn, steffen.kuehn@aurinovo.de

This file is part of OpenWME, an electromagnetic field solver based on
Weber-Maxwell electrodynamics.

OpenWME is free software: you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later version.

OpenWME is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see <https://www.gnu.org/licenses/>.
*/

#include <stdio.h>
#include "constants.h"
#include "scene.h"
#include "display.h"

const TVector black = TVector(0.25, 0.25, 0.25);
const TVector green = TVector(0, 1, 0);
const TVector red = TVector(1, 0, 0);
// the time step of the simulation
const sim_double dt = 0.01 * ns;

int main()
{
	TScene scene;
	// define a container with which one can later access all particles
	std::deque<TParticle*> Particles;
	// a field with virtual test charges to represent the forces as a function of location
	std::deque<TParticle*> Field;

	// define an empty particle
	TParticle* HertzianDipole = scene.Add_Particle();
	// convert the point charge into a Hertzian dipole
	HertzianDipole->ToHertzianDipole(me, e, 10 * nm, 1 * GHz, 0, TVector(0, 0, 1), NULL);
	// create trajectory
	HertzianDipole->SetLinearTrajectory(TVector(-40 * cm, 0, 0), TVector(0.7 * c, 0, 0));
	// add the particle to the container
	Particles.push_back(HertzianDipole);

	// create a grid of test charges to represent the field generated by the Hertzian dipole
	for (int ix = -50; ix <= 50; ix++)
	{
		for (int iz = -50; iz <= 50; iz++)
		{
			// a probe is a virtual point charge that can receive forces but does not generate
			// forces itself. Such objects do not exist in reality. They serve only for
			// visualization. Note that a probe can also have an instantaneous velocity and that
			// the perception of the field depends on it.
			TParticle* probe = scene.Add_Probe(TVector(ix * 1 * cm, 0, iz * cm), TVector(0, 0, 0));
			Field.push_back(probe);
		}
	}

	// define an electromagnetic force between each probe and the Hertzian dipole
	for (std::size_t j = 0; j < Field.size(); j++)
	{
		scene.Add_WeberMaxwellForce(HertzianDipole, Field[j]);
	}

	// open a window to display the field and motion of the Hertzian dipole
	TDisplay display(700, 700, -50 * cm, -50 * cm, 50 * cm, 50 * cm, "Transmitter moving at 70 percent of the speed of light");

	// simulate the change of the field and the motion of the Hertzian dipole step by step
	for (int i = 0; ; i++)
	{
		// time step
		scene.TimeStep(dt);

		// display simulation
		display.Clear();
		display.PlotForceFieldXZ(Field, i * dt, 1e14, 10, 10, black);
		display.DrawTime(i * dt / ns, "ns", 1, red);
		display.DrawParticle(HertzianDipole, i * dt, 5, green);
		display.Draw(true);
	}

	return 0;
}

/*
Copyright (c) 2023 by Steffen KÃ¼hn, steffen.kuehn@aurinovo.de

This file is part of OpenWME, an electromagnetic field solver based on
Weber-Maxwell electrodynamics.

OpenWME is free software: you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later version.

OpenWME is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see <https://www.gnu.org/licenses/>.
*/

#include <stdio.h>
#include <math.h>
#include "constants.h"
#include "scene.h"
#include "display.h"

const TVector black = TVector(0.25, 0.25, 0.25);
const TVector gray = TVector(0.75, 0.75, 0.75);
const TVector red = TVector(1, 0, 0);
const TVector blue = TVector(0, 0, 1);
const sim_double dt = 0.05 * ns;

const sim_double maxtime = 100 * ns;
const sim_double charge = e;

const sim_double sa = 6e6 * m / s;
const sim_double freq = 60e6 * Hz;

// trajectory
TVector trajectory0(sim_double t)
{
	return TVector(sa * t * cos(2 * freq * pi * t), 0, sa * t * sin(2 * freq * pi * t));
}

// first derivative of the trajectory with respect to time
TVector trajectory1(sim_double t)
{
	return TVector(sa * (cos(2 * freq * pi * t) - 2 * freq * pi * t * sin(2 * freq * pi * t)), 0, sa * (2 * freq * pi * t * cos(2 * freq * pi * t) + sin(2 * freq * pi * t)));
}

// second derivative of the trajectory with respect to time
TVector trajectory2(sim_double t)
{
	return TVector(-4 * freq * pi * sa * (freq * pi * t * cos(2 * freq * pi * t) + sin(2 * freq * pi * t)), 0, 4 * freq * pi * sa * (cos(2 * freq * pi * t) - freq * pi * t * sin(2 * freq * pi * t)));
}

int main()
{
	TScene scene;
	std::deque<TParticle*> Field;

	// create the point charge (ion)
	TParticle* Ion = scene.Add_Particle();
	Ion->ToPointCharge(1, charge);
	Ion->SetFixedTrajectory(TVector(0, 0, 0), trajectory0, trajectory1, trajectory2);

	// create a grid of test charges to represent the field generated by the point charge
	for (int ix = -50; ix <= 50; ix++)
	{
		for (int iz = -50; iz <= 50; iz++)
		{
			TParticle* Probe = scene.Add_Probe(TVector(ix * 10 * cm, 0, iz * 10 * cm), TVector(0, 0, 0));
			Field.push_back(Probe);
			scene.Add_WeberMaxwellForce(Ion, Probe);
		}
	}

	// open a window to display the field and motion of the particle
	TDisplay display(700, 700, -2 * m, -2 * m, 2 * m, 2 * m, "Cyclotron");

	// simulate the field step by step
	for (int i = 0; i * dt <= maxtime; i++)
	{
		// time step
		scene.TimeStep(dt);

		// display simulation
		display.Clear();
		for (int j = 0; j < i; j++)
		{
			display.DrawParticle(Ion, j * dt, 2, gray);
		}
		display.PlotForceFieldXZ(Field, i * dt, 1e9, 10, 10, black);
		display.DrawTime(nrm(Ion->GetVelocity(i * dt)) / c, "c", 1, red);
		display.DrawParticle(Ion, i * dt, 5, red);
		display.Draw(true);
	}

	return 0;
}

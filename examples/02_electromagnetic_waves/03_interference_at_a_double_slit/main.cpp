/*
Copyright (c) 2023 by Steffen KÃ¼hn, steffen.kuehn@aurinovo.de

This file is part of OpenWME, an electromagnetic field solver based on
Weber-Maxwell electrodynamics.

OpenWME is free software: you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later version.

OpenWME is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see <https://www.gnu.org/licenses/>.
*/

#include <stdio.h>
#include <math.h>
#include "constants.h"
#include "scene.h"
#include "display.h"

const TVector black = TVector(0.25, 0.25, 0.25);
const TVector green = TVector(0, 1, 0);
const TVector red = TVector(1, 0, 0);
const TVector blue = TVector(0, 0, 1);
// the time step of the simulation
const sim_double dt = 0.05 * ns;

sim_double AmplModFunc(sim_double t)
{
	if (t < 0) return 0;
	return 1;
}

int main()
{
	TScene scene;
	// two fields with virtual test charges to represent the forces as a function of location
	std::deque<TParticle*> PrimaryField;
	std::deque<TParticle*> SecondaryField;

	// create the transmitter (a copper bullet with a weight of 1 g, in which 0.1 percent of the conduction
	// electrons are oscillating)
	TParticle* Transmitter = scene.Add_Particle();
	// convert the point charge into a Hertzian dipole
	Transmitter->ToHertzianDipole(1 * g, 9.47682e21 * e * 0.001, 1 * nm, 2.5 * GHz, 0, TVector(0, 0, 1), AmplModFunc);
	// set position
	Transmitter->SetLinearTrajectory(TVector(-30 * cm, 0, 0), TVector(0, 0, 0));

	// create a grid of test charges to represent the field generated by the transmitter
	for (int ix = -50; ix <= 50; ix++)
	{
		for (int iz = -50; iz <= 50; iz++)
		{
			TParticle* Probe = scene.Add_Probe(TVector(ix * 1 * cm, 0, iz * cm), TVector(0, 0, 0));
			PrimaryField.push_back(Probe);
			scene.Add_WeberMaxwellForce(Transmitter, Probe);
		}
	}

	// the mirror
	std::deque<TParticle*> Mirror;
	for (int iz = -20; iz <= 20; iz++)
	{
		if ((iz > -7) && (iz < -3)) continue;
		if ((iz <  7) && (iz >  3)) continue;
		TParticle* Reflector = scene.Add_Particle();
		// convert the point charge into a Hertzian dipole
		Reflector->ToHertzianDipole(1 * g, 9.47682e21 * e, 0, 0, 0, TVector(0, 0, 1), NULL);
		// make reflective
		Reflector->MakeReflective(1e-1, 0, 1000);
		// set position
		Reflector->SetLinearTrajectory(TVector(30 * cm, 0, iz * 3 * cm), TVector(0, 0, 0));
		Mirror.push_back(Reflector);
	}

	// create a grid of test charges to represent the field generated by the receiver
	for (int ix = -50; ix <= 50; ix++)
	{
		for (int iz = -50; iz <= 50; iz++)
		{
			TParticle* Probe = scene.Add_Probe(TVector(ix * 1 * cm, 0, iz * cm), TVector(0, 0, 0));
			SecondaryField.push_back(Probe);
			for (std::size_t j = 0; j < Mirror.size(); j++)
			{
				scene.Add_WeberMaxwellForce(Mirror[j], Probe);
			}
		}
	}

	// create electromagnetic forces between transmitter and miror
	for (std::size_t j = 0; j < Mirror.size(); j++)
	{
		scene.Add_WeberMaxwellForce(Mirror[j], Transmitter);
	}

	// open a window to display the field and motion of the Hertzian dipole
	TDisplay display(700, 700, -50 * cm, -50 * cm, 50 * cm, 50 * cm, "Interference at a double slit");

	// simulate the change of the field and the motion of the Hertzian dipole step by step
	for (int i = 0; ; i++)
	{
		// time step
		scene.TimeStep(dt);

		// display simulation
		display.Clear();
		display.PlotForceFieldXZ(PrimaryField, i * dt, 1e-5, 10, 10, black);
		display.PlotForceFieldXZ(SecondaryField, i * dt, 1e-4, 10, 10, red);
		display.DrawTime(i * dt / ns, "ns", 1, black);
		display.DrawParticle(Transmitter, i * dt, 5, green);
		for (std::size_t j = 0; j < Mirror.size(); j++)
		{
			display.DrawParticle(Mirror[j], i * dt, 5, blue);
		}
		display.Draw(true);
	}

	return 0;
}
